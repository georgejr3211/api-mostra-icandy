{"version":3,"sources":["../../../src/api/auth/ctrl.js"],"names":["router","post","req","res","next","email","password","body","resource","resourceService","authenticate","status","json","error","console","log","bcrypt","hashSync","createResource","getResource","id","value","message","getResourceEmail","user","Usuario","findOne","where","newPassword","Math","random","toString","slice","update","get","sendEmail"],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport bcrypt from 'bcryptjs';\nimport * as resourceService from '../v1/usuarios/service';\nimport Usuario from '../v1/usuarios/model';\n\nconst router = Router();\n\nrouter.post('/', async (req, res, next) => {\n  try {\n    const { email, password } = req.body;\n    const resource = await resourceService.authenticate(email, password);\n    if (!resource) {\n      return res\n        .status(403)\n        .json(\n          'Falha ao tentar realizar autenticação, informe os dados corretamente',\n        );\n    }\n\n    return res.json(resource);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.post('/register', async (req, res, next) => {\n  try {\n    console.log('req body', req.body);\n    req.body.password = bcrypt.hashSync(req.body.password);\n    let resource = await resourceService.createResource(req.body);\n    resource = await resourceService.getResource(resource.id);\n\n    return res.json({\n      value: resource,\n    });\n  } catch (error) {\n    return next(error.message);\n  }\n});\n\nrouter.post('/email', async (req, res, next) => {\n  try {\n    const { email } = req.body;\n\n    const resource = await resourceService.getResourceEmail(email);\n\n    return res.json({\n      value: resource,\n    });\n  } catch (error) {\n    return next(error);\n  }\n});\n\nrouter.post('/forgot', async (req, res, next) => {\n  try {\n    const { email } = req.body;\n    const user = await Usuario.findOne({ where: { email } });\n    const newPassword = Math.random()\n      .toString(36)\n      .slice(-8);\n\n    // const newPassword = '123456';\n\n    await Usuario.update(\n      {\n        password: bcrypt.hashSync(newPassword),\n      },\n      { where: { id: user.get('id') } },\n    );\n    await resourceService.sendEmail(email, newPassword);\n\n    return res.json(req.body);\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;\n"],"file":"ctrl.js"}
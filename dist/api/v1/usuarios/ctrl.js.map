{"version":3,"sources":["../../../../src/api/v1/usuarios/ctrl.js"],"names":["router","storage","multer","diskStorage","destination","req","file","cb","filename","Date","toISOString","originalname","upload","get","res","next","offset","limit","s","query","resources","resourceService","getAllResources","json","value","error","user","id","params","getResource","post","cpf","validateBr","body","password","bcrypt","hashSync","resource","createResource","Error","message","put","single","console","log","files","updateResource","delete","deleteResource"],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport bcrypt from 'bcryptjs';\nimport { validateBr } from 'js-brasil';\nimport multer from 'multer';\nimport * as resourceService from './service';\n\nconst router = Router();\n\nconst storage = multer.diskStorage({\n  destination(req, file, cb) {\n    cb(null, './public/assets/images');\n  },\n  filename: (req, file, cb) => {\n    cb(null, new Date().toISOString() + file.originalname);\n  },\n});\n\nconst upload = multer({ storage });\n\nrouter.get('/', async (req, res, next) => {\n  try {\n    const { offset = 0, limit = 10, s = '' } = req.query;\n\n    const resources = await resourceService.getAllResources(offset, limit, s);\n\n    return res.json({\n      value: resources,\n    });\n  } catch (error) {\n    return next(error);\n  }\n});\n\nrouter.get('/logged-user', async (req, res, next) => {\n  try {\n    return res.json(req.user);\n  } catch (error) {\n    return next(error);\n  }\n});\n\nrouter.get('/:id', async (req, res, next) => {\n  try {\n    const { id } = req.params;\n\n    const resources = await resourceService.getResource(id);\n\n    return res.json({\n      value: resources,\n    });\n  } catch (error) {\n    return next(error);\n  }\n});\n\nrouter.post('/', async (req, res, next) => {\n  try {\n    const cpf = validateBr.cpf(req.body.cpf);\n\n    if (cpf) {\n      req.body.password = bcrypt.hashSync(req.body.password);\n      let resource = await resourceService.createResource(req.body);\n      resource = await resourceService.getResource(resource.id);\n\n      return res.json({\n        value: resource,\n      });\n    }\n    throw new Error('CPF INVÁLIDO!');\n  } catch (error) {\n    return next(error.message);\n  }\n});\n\nrouter.put('/:id', upload.single('foto_usuario'), async (req, res, next) => {\n  try {\n    const { id } = req.params;\n    console.log('req.file', req.file);\n    console.log('req.files', req.files);\n    console.log('USUARIO PUT', req.body);\n\n    let resource = await resourceService.getResource(id);\n    if (req.body.password) {\n      req.body.password = bcrypt.hashSync(req.body.password);\n    } else {\n      req.body.password = resource.get('password');\n    }\n\n    resource = await resourceService.updateResource(id, req.body);\n\n    return res.json({\n      value: resource,\n    });\n  } catch (error) {\n    return next(error);\n  }\n});\n\nrouter.delete('/:id', async (req, res, next) => {\n  try {\n    const { id } = req.params;\n    await resourceService.deleteResource(id);\n\n    return res.json({\n      value: id,\n    });\n  } catch (error) {\n    return next(error);\n  }\n});\n\nexport default router;\n"],"file":"ctrl.js"}
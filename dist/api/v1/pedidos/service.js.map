{"version":3,"sources":["../../../../src/api/v1/pedidos/service.js"],"names":["getAllResources","offset","limit","s","resources","Resource","findAndCountAll","include","all","where","Op","or","like","ativo","order","status","findAll","model","StatusPedido","as","attributes","Sequelize","fn","col","group","getResource","id","resource","findByPk","getResourceUser","usuarios_id","createResource","create","updateResource","update","deleteResource","then","res","destroy","verificaEstoque","idProdutos","produtosForaEstoque","produtoService","getResourceProdutosByIdForaEstoque","map","produto","get","plain","error","Error"],"mappings":"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","sourcesContent":["import { Op, Sequelize } from 'sequelize';\nimport Resource from './model';\nimport StatusPedido from '../statusPedidos/model';\nimport * as produtoService from '../produtos/service';\n\nexport async function getAllResources(offset, limit, s) {\n  let resources = await Resource.findAndCountAll({\n    include: [{ all: true }],\n    where: {\n      [Op.or]: [\n        { '$usuario.nome$': { [Op.like]: `%${s}%` } },\n        { '$formaPagamento.descricao$': { [Op.like]: `%${s}%` } },\n        { '$statusPedido.descricao$': { [Op.like]: `%${s}%` } },\n        { '$usuario.nome$': { [Op.like]: `%${s}%` } },\n        { '$usuario.email$': { [Op.like]: `%${s}%` } },\n        { '$usuario.sobrenome$': { [Op.like]: `%${s}%` } },\n        { '$usuario.username$': { [Op.like]: `%${s}%` } },\n      ],\n      ativo: 1,\n      '$usuario.ativo$': 1,\n    },\n    order: [['id', 'ASC']],\n    offset,\n  });\n\n  const status = await Resource.findAll({\n    include: [\n      {\n        model: StatusPedido,\n        as: 'statusPedido',\n        attributes: ['descricao'],\n      },\n    ],\n    attributes: [\n      [Sequelize.fn('count', Sequelize.col('status_pedido_id')), 'qtd'],\n    ],\n    group: ['statusPedido.id'],\n  });\n\n  resources = { ...resources, status };\n\n  return resources;\n}\n\nexport async function getResource(id) {\n  const resource = await Resource.findByPk(id, {\n    include: [{ all: true }],\n  });\n\n  return resource;\n}\n\nexport async function getResourceUser(id) {\n  const resource = await Resource.findAll({\n    include: [{ all: true }],\n    where: {\n      usuarios_id: id,\n    },\n    order: [['id', 'DESC']],\n  });\n\n  return resource;\n}\n\nexport function createResource(resource) {\n  return Resource.create(resource);\n}\n\nexport function updateResource(id, resource) {\n  return Resource.update(resource, { where: { id } });\n}\n\nexport function deleteResource(id) {\n  return Resource.findByPk(id).then(res => res.destroy());\n}\n\nexport async function verificaEstoque(idProdutos) {\n  try {\n    let produtosForaEstoque = await produtoService.getResourceProdutosByIdForaEstoque(\n      idProdutos,\n    );\n    produtosForaEstoque = produtosForaEstoque.map(produto => produto.get({ plain: true }));\n\n    return produtosForaEstoque;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n"],"file":"service.js"}